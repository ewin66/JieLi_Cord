//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SG.Client.WCFHost.Base_SGBaseDict_H {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="SG.Server.Host.Base", ConfigurationName="Base_SGBaseDict_H.SGBaseDict_H")]
    public interface SGBaseDict_H {
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/GetDataByKey", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/GetDataByKeyResponse")]
        byte[] GetDataByKey(byte[] loginTicket, string ORM_TypeName, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/GetDataByKey", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/GetDataByKeyResponse")]
        System.Threading.Tasks.Task<byte[]> GetDataByKeyAsync(byte[] loginTicket, string ORM_TypeName, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/GetSummaryData", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/GetSummaryDataResponse")]
        byte[] GetSummaryData(byte[] loginTicket, string ORM_TypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/GetSummaryData", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/GetSummaryDataResponse")]
        System.Threading.Tasks.Task<byte[]> GetSummaryDataAsync(byte[] loginTicket, string ORM_TypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/GetDataDictByTableName", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/GetDataDictByTableNameResponse")]
        byte[] GetDataDictByTableName(byte[] loginTicket, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/GetDataDictByTableName", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/GetDataDictByTableNameResponse")]
        System.Threading.Tasks.Task<byte[]> GetDataDictByTableNameAsync(byte[] loginTicket, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/DownloadDicts", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/DownloadDictsResponse")]
        byte[] DownloadDicts(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/DownloadDicts", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/DownloadDictsResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadDictsAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/Update", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/UpdateResponse")]
        bool Update(byte[] loginTicket, byte[] bs, string ORM_TypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/Update", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(byte[] loginTicket, byte[] bs, string ORM_TypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/UpdateEx", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/UpdateExResponse")]
        byte[] UpdateEx(byte[] loginTicket, byte[] bs, string ORM_TypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/UpdateEx", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/UpdateExResponse")]
        System.Threading.Tasks.Task<byte[]> UpdateExAsync(byte[] loginTicket, byte[] bs, string ORM_TypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/Delete", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/DeleteResponse")]
        bool Delete(byte[] loginTicket, string keyValue, string ORM_TypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/Delete", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(byte[] loginTicket, string keyValue, string ORM_TypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/CheckNoExists", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/CheckNoExistsResponse")]
        bool CheckNoExists(byte[] loginTicket, string keyValue, string ORM_TypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseDict_H/CheckNoExists", ReplyAction="SG.Server.Host.Base/SGBaseDict_H/CheckNoExistsResponse")]
        System.Threading.Tasks.Task<bool> CheckNoExistsAsync(byte[] loginTicket, string keyValue, string ORM_TypeName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SGBaseDict_HChannel : SG.Client.WCFHost.Base_SGBaseDict_H.SGBaseDict_H, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SGBaseDict_HClient : System.ServiceModel.ClientBase<SG.Client.WCFHost.Base_SGBaseDict_H.SGBaseDict_H>, SG.Client.WCFHost.Base_SGBaseDict_H.SGBaseDict_H {
        
        public SGBaseDict_HClient() {
        }
        
        public SGBaseDict_HClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SGBaseDict_HClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SGBaseDict_HClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SGBaseDict_HClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] GetDataByKey(byte[] loginTicket, string ORM_TypeName, string key) {
            return base.Channel.GetDataByKey(loginTicket, ORM_TypeName, key);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDataByKeyAsync(byte[] loginTicket, string ORM_TypeName, string key) {
            return base.Channel.GetDataByKeyAsync(loginTicket, ORM_TypeName, key);
        }
        
        public byte[] GetSummaryData(byte[] loginTicket, string ORM_TypeName) {
            return base.Channel.GetSummaryData(loginTicket, ORM_TypeName);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSummaryDataAsync(byte[] loginTicket, string ORM_TypeName) {
            return base.Channel.GetSummaryDataAsync(loginTicket, ORM_TypeName);
        }
        
        public byte[] GetDataDictByTableName(byte[] loginTicket, string tableName) {
            return base.Channel.GetDataDictByTableName(loginTicket, tableName);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDataDictByTableNameAsync(byte[] loginTicket, string tableName) {
            return base.Channel.GetDataDictByTableNameAsync(loginTicket, tableName);
        }
        
        public byte[] DownloadDicts(byte[] loginTicket) {
            return base.Channel.DownloadDicts(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadDictsAsync(byte[] loginTicket) {
            return base.Channel.DownloadDictsAsync(loginTicket);
        }
        
        public bool Update(byte[] loginTicket, byte[] bs, string ORM_TypeName) {
            return base.Channel.Update(loginTicket, bs, ORM_TypeName);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(byte[] loginTicket, byte[] bs, string ORM_TypeName) {
            return base.Channel.UpdateAsync(loginTicket, bs, ORM_TypeName);
        }
        
        public byte[] UpdateEx(byte[] loginTicket, byte[] bs, string ORM_TypeName) {
            return base.Channel.UpdateEx(loginTicket, bs, ORM_TypeName);
        }
        
        public System.Threading.Tasks.Task<byte[]> UpdateExAsync(byte[] loginTicket, byte[] bs, string ORM_TypeName) {
            return base.Channel.UpdateExAsync(loginTicket, bs, ORM_TypeName);
        }
        
        public bool Delete(byte[] loginTicket, string keyValue, string ORM_TypeName) {
            return base.Channel.Delete(loginTicket, keyValue, ORM_TypeName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(byte[] loginTicket, string keyValue, string ORM_TypeName) {
            return base.Channel.DeleteAsync(loginTicket, keyValue, ORM_TypeName);
        }
        
        public bool CheckNoExists(byte[] loginTicket, string keyValue, string ORM_TypeName) {
            return base.Channel.CheckNoExists(loginTicket, keyValue, ORM_TypeName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckNoExistsAsync(byte[] loginTicket, string keyValue, string ORM_TypeName) {
            return base.Channel.CheckNoExistsAsync(loginTicket, keyValue, ORM_TypeName);
        }
    }
}
