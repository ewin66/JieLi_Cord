//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SG.Client.WCFHost.Base_SGBaseUser_H {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="SG.Server.Host.Base", ConfigurationName="Base_SGBaseUser_H.SGBaseUser_H")]
    public interface SGBaseUser_H {
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUsers", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUsersResponse")]
        byte[] U_GetUsers(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUsers", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUsersResponse")]
        System.Threading.Tasks.Task<byte[]> U_GetUsersAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserReportData", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserReportDataResponse")]
        byte[] U_GetUserReportData(byte[] loginTicket, System.DateTime createDateFrom, System.DateTime createDateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserReportData", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserReportDataResponse")]
        System.Threading.Tasks.Task<byte[]> U_GetUserReportDataAsync(byte[] loginTicket, System.DateTime createDateFrom, System.DateTime createDateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUser", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserResponse")]
        byte[] U_GetUser(byte[] loginTicket, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUser", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserResponse")]
        System.Threading.Tasks.Task<byte[]> U_GetUserAsync(byte[] loginTicket, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserGroups", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserGroupsResponse")]
        byte[] U_GetUserGroups(byte[] loginTicket, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserGroups", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserGroupsResponse")]
        System.Threading.Tasks.Task<byte[]> U_GetUserGroupsAsync(byte[] loginTicket, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserByNovellID", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserByNovellIDResponse")]
        byte[] U_GetUserByNovellID(byte[] loginTicket, string novellAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserByNovellID", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserByNovellIDResponse")]
        System.Threading.Tasks.Task<byte[]> U_GetUserByNovellIDAsync(byte[] loginTicket, string novellAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_UpdateUser", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_UpdateUserResponse")]
        bool U_UpdateUser(byte[] loginTicket, byte[] userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_UpdateUser", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> U_UpdateUserAsync(byte[] loginTicket, byte[] userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_DeleteUser", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_DeleteUserResponse")]
        bool U_DeleteUser(byte[] loginTicket, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_DeleteUser", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> U_DeleteUserAsync(byte[] loginTicket, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_ExistsUser", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_ExistsUserResponse")]
        bool U_ExistsUser(byte[] loginTicket, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_ExistsUser", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_ExistsUserResponse")]
        System.Threading.Tasks.Task<bool> U_ExistsUserAsync(byte[] loginTicket, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_ModifyPassword", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_ModifyPasswordResponse")]
        bool U_ModifyPassword(byte[] loginTicket, string account, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_ModifyPassword", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_ModifyPasswordResponse")]
        System.Threading.Tasks.Task<bool> U_ModifyPasswordAsync(byte[] loginTicket, string account, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserAuthorities", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserAuthoritiesResponse")]
        byte[] U_GetUserAuthorities(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserAuthorities", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserAuthoritiesResponse")]
        System.Threading.Tasks.Task<byte[]> U_GetUserAuthoritiesAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_Logout", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_LogoutResponse")]
        void U_Logout(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_Logout", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_LogoutResponse")]
        System.Threading.Tasks.Task U_LogoutAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_Login", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_LoginResponse")]
        byte[] U_Login(byte[] validationTicket, byte[] loginUser, char LoginUserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_Login", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_LoginResponse")]
        System.Threading.Tasks.Task<byte[]> U_LoginAsync(byte[] validationTicket, byte[] loginUser, char LoginUserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_LoginByCard", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_LoginByCardResponse")]
        byte[] U_LoginByCard(byte[] validationTicket, byte[] loginUser, char LoginUserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_LoginByCard", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_LoginByCardResponse")]
        System.Threading.Tasks.Task<byte[]> U_LoginByCardAsync(byte[] validationTicket, byte[] loginUser, char LoginUserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_ModifyPwdDirect", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_ModifyPwdDirectResponse")]
        bool U_ModifyPwdDirect(byte[] validationTicket, string account, string pwd, string DBName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_ModifyPwdDirect", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_ModifyPwdDirectResponse")]
        System.Threading.Tasks.Task<bool> U_ModifyPwdDirectAsync(byte[] validationTicket, string account, string pwd, string DBName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserDirect", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserDirectResponse")]
        byte[] U_GetUserDirect(byte[] validationTicket, string account, string DBName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/U_GetUserDirect", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/U_GetUserDirectResponse")]
        System.Threading.Tasks.Task<byte[]> U_GetUserDirectAsync(byte[] validationTicket, string account, string DBName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetAuthorityItems", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetAuthorityItemsResponse")]
        byte[] G_GetAuthorityItems(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetAuthorityItems", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetAuthorityItemsResponse")]
        System.Threading.Tasks.Task<byte[]> G_GetAuthorityItemsAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetAuthorityItem", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetAuthorityItemResponse")]
        byte[] G_GetAuthorityItem(byte[] loginTicket, string sFunID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetAuthorityItem", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetAuthorityItemResponse")]
        System.Threading.Tasks.Task<byte[]> G_GetAuthorityItemAsync(byte[] loginTicket, string sFunID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetUserGroup", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetUserGroupResponse")]
        byte[] G_GetUserGroup(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetUserGroup", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetUserGroupResponse")]
        System.Threading.Tasks.Task<byte[]> G_GetUserGroupAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetUserGroupByCode", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetUserGroupByCodeResponse")]
        byte[] G_GetUserGroupByCode(byte[] loginTicket, string groupCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetUserGroupByCode", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetUserGroupByCodeResponse")]
        System.Threading.Tasks.Task<byte[]> G_GetUserGroupByCodeAsync(byte[] loginTicket, string groupCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetFormTagCustomName", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetFormTagCustomNameResponse")]
        byte[] G_GetFormTagCustomName(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetFormTagCustomName", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetFormTagCustomNameResponse")]
        System.Threading.Tasks.Task<byte[]> G_GetFormTagCustomNameAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_CheckNoExists", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_CheckNoExistsResponse")]
        bool G_CheckNoExists(byte[] loginTicket, string groupCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_CheckNoExists", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_CheckNoExistsResponse")]
        System.Threading.Tasks.Task<bool> G_CheckNoExistsAsync(byte[] loginTicket, string groupCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_DeleteGroupByKey", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_DeleteGroupByKeyResponse")]
        bool G_DeleteGroupByKey(byte[] loginTicket, string groupCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_DeleteGroupByKey", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_DeleteGroupByKeyResponse")]
        System.Threading.Tasks.Task<bool> G_DeleteGroupByKeyAsync(byte[] loginTicket, string groupCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetFormAuthority", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetFormAuthorityResponse")]
        int G_GetFormAuthority(byte[] loginTicket, string account, int moduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/G_GetFormAuthority", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/G_GetFormAuthorityResponse")]
        System.Threading.Tasks.Task<int> G_GetFormAuthorityAsync(byte[] loginTicket, string account, int moduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/GetFormShow", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/GetFormShowResponse")]
        int GetFormShow(byte[] loginTicket, string account, int moduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/GetFormShow", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/GetFormShowResponse")]
        System.Threading.Tasks.Task<int> GetFormShowAsync(byte[] loginTicket, string account, int moduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/GetMenuAuthority", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/GetMenuAuthorityResponse")]
        int GetMenuAuthority(byte[] loginTicket, string account, int moduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/GetMenuAuthority", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/GetMenuAuthorityResponse")]
        System.Threading.Tasks.Task<int> GetMenuAuthorityAsync(byte[] loginTicket, string account, int moduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/GetMenuShow", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/GetMenuShowResponse")]
        int GetMenuShow(byte[] loginTicket, string account, int moduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/SGBaseUser_H/GetMenuShow", ReplyAction="SG.Server.Host.Base/SGBaseUser_H/GetMenuShowResponse")]
        System.Threading.Tasks.Task<int> GetMenuShowAsync(byte[] loginTicket, string account, int moduleID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SGBaseUser_HChannel : SG.Client.WCFHost.Base_SGBaseUser_H.SGBaseUser_H, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SGBaseUser_HClient : System.ServiceModel.ClientBase<SG.Client.WCFHost.Base_SGBaseUser_H.SGBaseUser_H>, SG.Client.WCFHost.Base_SGBaseUser_H.SGBaseUser_H {
        
        public SGBaseUser_HClient() {
        }
        
        public SGBaseUser_HClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SGBaseUser_HClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SGBaseUser_HClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SGBaseUser_HClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] U_GetUsers(byte[] loginTicket) {
            return base.Channel.U_GetUsers(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> U_GetUsersAsync(byte[] loginTicket) {
            return base.Channel.U_GetUsersAsync(loginTicket);
        }
        
        public byte[] U_GetUserReportData(byte[] loginTicket, System.DateTime createDateFrom, System.DateTime createDateTo) {
            return base.Channel.U_GetUserReportData(loginTicket, createDateFrom, createDateTo);
        }
        
        public System.Threading.Tasks.Task<byte[]> U_GetUserReportDataAsync(byte[] loginTicket, System.DateTime createDateFrom, System.DateTime createDateTo) {
            return base.Channel.U_GetUserReportDataAsync(loginTicket, createDateFrom, createDateTo);
        }
        
        public byte[] U_GetUser(byte[] loginTicket, string account) {
            return base.Channel.U_GetUser(loginTicket, account);
        }
        
        public System.Threading.Tasks.Task<byte[]> U_GetUserAsync(byte[] loginTicket, string account) {
            return base.Channel.U_GetUserAsync(loginTicket, account);
        }
        
        public byte[] U_GetUserGroups(byte[] loginTicket, string account) {
            return base.Channel.U_GetUserGroups(loginTicket, account);
        }
        
        public System.Threading.Tasks.Task<byte[]> U_GetUserGroupsAsync(byte[] loginTicket, string account) {
            return base.Channel.U_GetUserGroupsAsync(loginTicket, account);
        }
        
        public byte[] U_GetUserByNovellID(byte[] loginTicket, string novellAccount) {
            return base.Channel.U_GetUserByNovellID(loginTicket, novellAccount);
        }
        
        public System.Threading.Tasks.Task<byte[]> U_GetUserByNovellIDAsync(byte[] loginTicket, string novellAccount) {
            return base.Channel.U_GetUserByNovellIDAsync(loginTicket, novellAccount);
        }
        
        public bool U_UpdateUser(byte[] loginTicket, byte[] userData) {
            return base.Channel.U_UpdateUser(loginTicket, userData);
        }
        
        public System.Threading.Tasks.Task<bool> U_UpdateUserAsync(byte[] loginTicket, byte[] userData) {
            return base.Channel.U_UpdateUserAsync(loginTicket, userData);
        }
        
        public bool U_DeleteUser(byte[] loginTicket, string account) {
            return base.Channel.U_DeleteUser(loginTicket, account);
        }
        
        public System.Threading.Tasks.Task<bool> U_DeleteUserAsync(byte[] loginTicket, string account) {
            return base.Channel.U_DeleteUserAsync(loginTicket, account);
        }
        
        public bool U_ExistsUser(byte[] loginTicket, string account) {
            return base.Channel.U_ExistsUser(loginTicket, account);
        }
        
        public System.Threading.Tasks.Task<bool> U_ExistsUserAsync(byte[] loginTicket, string account) {
            return base.Channel.U_ExistsUserAsync(loginTicket, account);
        }
        
        public bool U_ModifyPassword(byte[] loginTicket, string account, string pwd) {
            return base.Channel.U_ModifyPassword(loginTicket, account, pwd);
        }
        
        public System.Threading.Tasks.Task<bool> U_ModifyPasswordAsync(byte[] loginTicket, string account, string pwd) {
            return base.Channel.U_ModifyPasswordAsync(loginTicket, account, pwd);
        }
        
        public byte[] U_GetUserAuthorities(byte[] loginTicket) {
            return base.Channel.U_GetUserAuthorities(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> U_GetUserAuthoritiesAsync(byte[] loginTicket) {
            return base.Channel.U_GetUserAuthoritiesAsync(loginTicket);
        }
        
        public void U_Logout(byte[] loginTicket) {
            base.Channel.U_Logout(loginTicket);
        }
        
        public System.Threading.Tasks.Task U_LogoutAsync(byte[] loginTicket) {
            return base.Channel.U_LogoutAsync(loginTicket);
        }
        
        public byte[] U_Login(byte[] validationTicket, byte[] loginUser, char LoginUserType) {
            return base.Channel.U_Login(validationTicket, loginUser, LoginUserType);
        }
        
        public System.Threading.Tasks.Task<byte[]> U_LoginAsync(byte[] validationTicket, byte[] loginUser, char LoginUserType) {
            return base.Channel.U_LoginAsync(validationTicket, loginUser, LoginUserType);
        }
        
        public byte[] U_LoginByCard(byte[] validationTicket, byte[] loginUser, char LoginUserType) {
            return base.Channel.U_LoginByCard(validationTicket, loginUser, LoginUserType);
        }
        
        public System.Threading.Tasks.Task<byte[]> U_LoginByCardAsync(byte[] validationTicket, byte[] loginUser, char LoginUserType) {
            return base.Channel.U_LoginByCardAsync(validationTicket, loginUser, LoginUserType);
        }
        
        public bool U_ModifyPwdDirect(byte[] validationTicket, string account, string pwd, string DBName) {
            return base.Channel.U_ModifyPwdDirect(validationTicket, account, pwd, DBName);
        }
        
        public System.Threading.Tasks.Task<bool> U_ModifyPwdDirectAsync(byte[] validationTicket, string account, string pwd, string DBName) {
            return base.Channel.U_ModifyPwdDirectAsync(validationTicket, account, pwd, DBName);
        }
        
        public byte[] U_GetUserDirect(byte[] validationTicket, string account, string DBName) {
            return base.Channel.U_GetUserDirect(validationTicket, account, DBName);
        }
        
        public System.Threading.Tasks.Task<byte[]> U_GetUserDirectAsync(byte[] validationTicket, string account, string DBName) {
            return base.Channel.U_GetUserDirectAsync(validationTicket, account, DBName);
        }
        
        public byte[] G_GetAuthorityItems(byte[] loginTicket) {
            return base.Channel.G_GetAuthorityItems(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> G_GetAuthorityItemsAsync(byte[] loginTicket) {
            return base.Channel.G_GetAuthorityItemsAsync(loginTicket);
        }
        
        public byte[] G_GetAuthorityItem(byte[] loginTicket, string sFunID) {
            return base.Channel.G_GetAuthorityItem(loginTicket, sFunID);
        }
        
        public System.Threading.Tasks.Task<byte[]> G_GetAuthorityItemAsync(byte[] loginTicket, string sFunID) {
            return base.Channel.G_GetAuthorityItemAsync(loginTicket, sFunID);
        }
        
        public byte[] G_GetUserGroup(byte[] loginTicket) {
            return base.Channel.G_GetUserGroup(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> G_GetUserGroupAsync(byte[] loginTicket) {
            return base.Channel.G_GetUserGroupAsync(loginTicket);
        }
        
        public byte[] G_GetUserGroupByCode(byte[] loginTicket, string groupCode) {
            return base.Channel.G_GetUserGroupByCode(loginTicket, groupCode);
        }
        
        public System.Threading.Tasks.Task<byte[]> G_GetUserGroupByCodeAsync(byte[] loginTicket, string groupCode) {
            return base.Channel.G_GetUserGroupByCodeAsync(loginTicket, groupCode);
        }
        
        public byte[] G_GetFormTagCustomName(byte[] loginTicket) {
            return base.Channel.G_GetFormTagCustomName(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> G_GetFormTagCustomNameAsync(byte[] loginTicket) {
            return base.Channel.G_GetFormTagCustomNameAsync(loginTicket);
        }
        
        public bool G_CheckNoExists(byte[] loginTicket, string groupCode) {
            return base.Channel.G_CheckNoExists(loginTicket, groupCode);
        }
        
        public System.Threading.Tasks.Task<bool> G_CheckNoExistsAsync(byte[] loginTicket, string groupCode) {
            return base.Channel.G_CheckNoExistsAsync(loginTicket, groupCode);
        }
        
        public bool G_DeleteGroupByKey(byte[] loginTicket, string groupCode) {
            return base.Channel.G_DeleteGroupByKey(loginTicket, groupCode);
        }
        
        public System.Threading.Tasks.Task<bool> G_DeleteGroupByKeyAsync(byte[] loginTicket, string groupCode) {
            return base.Channel.G_DeleteGroupByKeyAsync(loginTicket, groupCode);
        }
        
        public int G_GetFormAuthority(byte[] loginTicket, string account, int moduleID) {
            return base.Channel.G_GetFormAuthority(loginTicket, account, moduleID);
        }
        
        public System.Threading.Tasks.Task<int> G_GetFormAuthorityAsync(byte[] loginTicket, string account, int moduleID) {
            return base.Channel.G_GetFormAuthorityAsync(loginTicket, account, moduleID);
        }
        
        public int GetFormShow(byte[] loginTicket, string account, int moduleID) {
            return base.Channel.GetFormShow(loginTicket, account, moduleID);
        }
        
        public System.Threading.Tasks.Task<int> GetFormShowAsync(byte[] loginTicket, string account, int moduleID) {
            return base.Channel.GetFormShowAsync(loginTicket, account, moduleID);
        }
        
        public int GetMenuAuthority(byte[] loginTicket, string account, int moduleID) {
            return base.Channel.GetMenuAuthority(loginTicket, account, moduleID);
        }
        
        public System.Threading.Tasks.Task<int> GetMenuAuthorityAsync(byte[] loginTicket, string account, int moduleID) {
            return base.Channel.GetMenuAuthorityAsync(loginTicket, account, moduleID);
        }
        
        public int GetMenuShow(byte[] loginTicket, string account, int moduleID) {
            return base.Channel.GetMenuShow(loginTicket, account, moduleID);
        }
        
        public System.Threading.Tasks.Task<int> GetMenuShowAsync(byte[] loginTicket, string account, int moduleID) {
            return base.Channel.GetMenuShowAsync(loginTicket, account, moduleID);
        }
    }
}
