//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SG.Client.WCFHost.Base_CommonService_H {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="SG.Server.Host.Base", ConfigurationName="Base_CommonService_H.CommonService_H")]
    public interface CommonService_H {
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetSystemOrganization", ReplyAction="SG.Server.Host.Base/CommonService_H/GetSystemOrganizationResponse")]
        byte[] GetSystemOrganization(byte[] validationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetSystemOrganization", ReplyAction="SG.Server.Host.Base/CommonService_H/GetSystemOrganizationResponse")]
        System.Threading.Tasks.Task<byte[]> GetSystemOrganizationAsync(byte[] validationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetSystemDataSet", ReplyAction="SG.Server.Host.Base/CommonService_H/GetSystemDataSetResponse")]
        byte[] GetSystemDataSet(byte[] validationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetSystemDataSet", ReplyAction="SG.Server.Host.Base/CommonService_H/GetSystemDataSetResponse")]
        System.Threading.Tasks.Task<byte[]> GetSystemDataSetAsync(byte[] validationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetSystemDataSetByOrg", ReplyAction="SG.Server.Host.Base/CommonService_H/GetSystemDataSetByOrgResponse")]
        byte[] GetSystemDataSetByOrg(byte[] validationTicket, string sOrgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetSystemDataSetByOrg", ReplyAction="SG.Server.Host.Base/CommonService_H/GetSystemDataSetByOrgResponse")]
        System.Threading.Tasks.Task<byte[]> GetSystemDataSetByOrgAsync(byte[] validationTicket, string sOrgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/SearchLog", ReplyAction="SG.Server.Host.Base/CommonService_H/SearchLogResponse")]
        byte[] SearchLog(byte[] loginTicket, string sFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/SearchLog", ReplyAction="SG.Server.Host.Base/CommonService_H/SearchLogResponse")]
        System.Threading.Tasks.Task<byte[]> SearchLogAsync(byte[] loginTicket, string sFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/TestConnection", ReplyAction="SG.Server.Host.Base/CommonService_H/TestConnectionResponse")]
        bool TestConnection(byte[] validationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/TestConnection", ReplyAction="SG.Server.Host.Base/CommonService_H/TestConnectionResponse")]
        System.Threading.Tasks.Task<bool> TestConnectionAsync(byte[] validationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/TestConnectionD", ReplyAction="SG.Server.Host.Base/CommonService_H/TestConnectionDResponse")]
        bool TestConnectionD(byte[] validationTicket, string dbType, string Server, string database, string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/TestConnectionD", ReplyAction="SG.Server.Host.Base/CommonService_H/TestConnectionDResponse")]
        System.Threading.Tasks.Task<bool> TestConnectionDAsync(byte[] validationTicket, string dbType, string Server, string database, string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/WriteLogOP", ReplyAction="SG.Server.Host.Base/CommonService_H/WriteLogOPResponse")]
        void WriteLogOP(byte[] loginTicket, string sFunID, string sFSubunID, string sFdesc, string sSql);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/WriteLogOP", ReplyAction="SG.Server.Host.Base/CommonService_H/WriteLogOPResponse")]
        System.Threading.Tasks.Task WriteLogOPAsync(byte[] loginTicket, string sFunID, string sFSubunID, string sFdesc, string sSql);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetModules", ReplyAction="SG.Server.Host.Base/CommonService_H/GetModulesResponse")]
        byte[] GetModules(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetModules", ReplyAction="SG.Server.Host.Base/CommonService_H/GetModulesResponse")]
        System.Threading.Tasks.Task<byte[]> GetModulesAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/WriteLog", ReplyAction="SG.Server.Host.Base/CommonService_H/WriteLogResponse")]
        void WriteLog(byte[] loginTicket, string logID, byte[] originalData, byte[] changes, string tableName, string keyFieldName, bool isMaster);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/WriteLog", ReplyAction="SG.Server.Host.Base/CommonService_H/WriteLogResponse")]
        System.Threading.Tasks.Task WriteLogAsync(byte[] loginTicket, string logID, byte[] originalData, byte[] changes, string tableName, string keyFieldName, bool isMaster);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/SearchLogData", ReplyAction="SG.Server.Host.Base/CommonService_H/SearchLogDataResponse")]
        byte[] SearchLogData(byte[] loginTicket, string logUser, string tableName, System.DateTime dateFrom, System.DateTime dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/SearchLogData", ReplyAction="SG.Server.Host.Base/CommonService_H/SearchLogDataResponse")]
        System.Threading.Tasks.Task<byte[]> SearchLogDataAsync(byte[] loginTicket, string logUser, string tableName, System.DateTime dateFrom, System.DateTime dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/SaveFieldDef", ReplyAction="SG.Server.Host.Base/CommonService_H/SaveFieldDefResponse")]
        bool SaveFieldDef(byte[] loginTicket, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/SaveFieldDef", ReplyAction="SG.Server.Host.Base/CommonService_H/SaveFieldDefResponse")]
        System.Threading.Tasks.Task<bool> SaveFieldDefAsync(byte[] loginTicket, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetLogFieldDef", ReplyAction="SG.Server.Host.Base/CommonService_H/GetLogFieldDefResponse")]
        byte[] GetLogFieldDef(byte[] loginTicket, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetLogFieldDef", ReplyAction="SG.Server.Host.Base/CommonService_H/GetLogFieldDefResponse")]
        System.Threading.Tasks.Task<byte[]> GetLogFieldDefAsync(byte[] loginTicket, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetTracedFields", ReplyAction="SG.Server.Host.Base/CommonService_H/GetTracedFieldsResponse")]
        string[] GetTracedFields(byte[] loginTicket, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetTracedFields", ReplyAction="SG.Server.Host.Base/CommonService_H/GetTracedFieldsResponse")]
        System.Threading.Tasks.Task<string[]> GetTracedFieldsAsync(byte[] loginTicket, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/C_GetTableID", ReplyAction="SG.Server.Host.Base/CommonService_H/C_GetTableIDResponse")]
        string C_GetTableID(byte[] loginTicket, string sTableName, string sFieldID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/C_GetTableID", ReplyAction="SG.Server.Host.Base/CommonService_H/C_GetTableIDResponse")]
        System.Threading.Tasks.Task<string> C_GetTableIDAsync(byte[] loginTicket, string sTableName, string sFieldID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/C_GetTableFieldValue", ReplyAction="SG.Server.Host.Base/CommonService_H/C_GetTableFieldValueResponse")]
        string C_GetTableFieldValue(byte[] loginTicket, string sTableName, string sField, string SCon);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/C_GetTableFieldValue", ReplyAction="SG.Server.Host.Base/CommonService_H/C_GetTableFieldValueResponse")]
        System.Threading.Tasks.Task<string> C_GetTableFieldValueAsync(byte[] loginTicket, string sTableName, string sField, string SCon);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetSQLServerDbListString", ReplyAction="SG.Server.Host.Base/CommonService_H/GetSQLServerDbListStringResponse")]
        string GetSQLServerDbListString(byte[] validationTicket, string sServerName, string sUser, string sPwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetSQLServerDbListString", ReplyAction="SG.Server.Host.Base/CommonService_H/GetSQLServerDbListStringResponse")]
        System.Threading.Tasks.Task<string> GetSQLServerDbListStringAsync(byte[] validationTicket, string sServerName, string sUser, string sPwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetDBLink", ReplyAction="SG.Server.Host.Base/CommonService_H/GetDBLinkResponse")]
        byte[] GetDBLink(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetDBLink", ReplyAction="SG.Server.Host.Base/CommonService_H/GetDBLinkResponse")]
        System.Threading.Tasks.Task<byte[]> GetDBLinkAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetDBLinkByID", ReplyAction="SG.Server.Host.Base/CommonService_H/GetDBLinkByIDResponse")]
        byte[] GetDBLinkByID(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetDBLinkByID", ReplyAction="SG.Server.Host.Base/CommonService_H/GetDBLinkByIDResponse")]
        System.Threading.Tasks.Task<byte[]> GetDBLinkByIDAsync(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/G_GetSystemProfile", ReplyAction="SG.Server.Host.Base/CommonService_H/G_GetSystemProfileResponse")]
        byte[] G_GetSystemProfile(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/G_GetSystemProfile", ReplyAction="SG.Server.Host.Base/CommonService_H/G_GetSystemProfileResponse")]
        System.Threading.Tasks.Task<byte[]> G_GetSystemProfileAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/G_GetSystemProfileVal", ReplyAction="SG.Server.Host.Base/CommonService_H/G_GetSystemProfileValResponse")]
        string G_GetSystemProfileVal(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/G_GetSystemProfileVal", ReplyAction="SG.Server.Host.Base/CommonService_H/G_GetSystemProfileValResponse")]
        System.Threading.Tasks.Task<string> G_GetSystemProfileValAsync(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetAttachedFiles", ReplyAction="SG.Server.Host.Base/CommonService_H/GetAttachedFilesResponse")]
        byte[] GetAttachedFiles(byte[] loginTicket, string docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/GetAttachedFiles", ReplyAction="SG.Server.Host.Base/CommonService_H/GetAttachedFilesResponse")]
        System.Threading.Tasks.Task<byte[]> GetAttachedFilesAsync(byte[] loginTicket, string docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/getTable", ReplyAction="SG.Server.Host.Base/CommonService_H/getTableResponse")]
        byte[] getTable(byte[] loginTicket, string sTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/getTable", ReplyAction="SG.Server.Host.Base/CommonService_H/getTableResponse")]
        System.Threading.Tasks.Task<byte[]> getTableAsync(byte[] loginTicket, string sTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/getField", ReplyAction="SG.Server.Host.Base/CommonService_H/getFieldResponse")]
        byte[] getField(byte[] loginTicket, string sTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/getField", ReplyAction="SG.Server.Host.Base/CommonService_H/getFieldResponse")]
        System.Threading.Tasks.Task<byte[]> getFieldAsync(byte[] loginTicket, string sTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/getDataTableSQL", ReplyAction="SG.Server.Host.Base/CommonService_H/getDataTableSQLResponse")]
        byte[] getDataTableSQL(byte[] loginTicket, string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Base/CommonService_H/getDataTableSQL", ReplyAction="SG.Server.Host.Base/CommonService_H/getDataTableSQLResponse")]
        System.Threading.Tasks.Task<byte[]> getDataTableSQLAsync(byte[] loginTicket, string sql);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CommonService_HChannel : SG.Client.WCFHost.Base_CommonService_H.CommonService_H, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommonService_HClient : System.ServiceModel.ClientBase<SG.Client.WCFHost.Base_CommonService_H.CommonService_H>, SG.Client.WCFHost.Base_CommonService_H.CommonService_H {
        
        public CommonService_HClient() {
        }
        
        public CommonService_HClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommonService_HClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonService_HClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonService_HClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] GetSystemOrganization(byte[] validationTicket) {
            return base.Channel.GetSystemOrganization(validationTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSystemOrganizationAsync(byte[] validationTicket) {
            return base.Channel.GetSystemOrganizationAsync(validationTicket);
        }
        
        public byte[] GetSystemDataSet(byte[] validationTicket) {
            return base.Channel.GetSystemDataSet(validationTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSystemDataSetAsync(byte[] validationTicket) {
            return base.Channel.GetSystemDataSetAsync(validationTicket);
        }
        
        public byte[] GetSystemDataSetByOrg(byte[] validationTicket, string sOrgID) {
            return base.Channel.GetSystemDataSetByOrg(validationTicket, sOrgID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSystemDataSetByOrgAsync(byte[] validationTicket, string sOrgID) {
            return base.Channel.GetSystemDataSetByOrgAsync(validationTicket, sOrgID);
        }
        
        public byte[] SearchLog(byte[] loginTicket, string sFilter) {
            return base.Channel.SearchLog(loginTicket, sFilter);
        }
        
        public System.Threading.Tasks.Task<byte[]> SearchLogAsync(byte[] loginTicket, string sFilter) {
            return base.Channel.SearchLogAsync(loginTicket, sFilter);
        }
        
        public bool TestConnection(byte[] validationTicket) {
            return base.Channel.TestConnection(validationTicket);
        }
        
        public System.Threading.Tasks.Task<bool> TestConnectionAsync(byte[] validationTicket) {
            return base.Channel.TestConnectionAsync(validationTicket);
        }
        
        public bool TestConnectionD(byte[] validationTicket, string dbType, string Server, string database, string user, string password) {
            return base.Channel.TestConnectionD(validationTicket, dbType, Server, database, user, password);
        }
        
        public System.Threading.Tasks.Task<bool> TestConnectionDAsync(byte[] validationTicket, string dbType, string Server, string database, string user, string password) {
            return base.Channel.TestConnectionDAsync(validationTicket, dbType, Server, database, user, password);
        }
        
        public void WriteLogOP(byte[] loginTicket, string sFunID, string sFSubunID, string sFdesc, string sSql) {
            base.Channel.WriteLogOP(loginTicket, sFunID, sFSubunID, sFdesc, sSql);
        }
        
        public System.Threading.Tasks.Task WriteLogOPAsync(byte[] loginTicket, string sFunID, string sFSubunID, string sFdesc, string sSql) {
            return base.Channel.WriteLogOPAsync(loginTicket, sFunID, sFSubunID, sFdesc, sSql);
        }
        
        public byte[] GetModules(byte[] loginTicket) {
            return base.Channel.GetModules(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetModulesAsync(byte[] loginTicket) {
            return base.Channel.GetModulesAsync(loginTicket);
        }
        
        public void WriteLog(byte[] loginTicket, string logID, byte[] originalData, byte[] changes, string tableName, string keyFieldName, bool isMaster) {
            base.Channel.WriteLog(loginTicket, logID, originalData, changes, tableName, keyFieldName, isMaster);
        }
        
        public System.Threading.Tasks.Task WriteLogAsync(byte[] loginTicket, string logID, byte[] originalData, byte[] changes, string tableName, string keyFieldName, bool isMaster) {
            return base.Channel.WriteLogAsync(loginTicket, logID, originalData, changes, tableName, keyFieldName, isMaster);
        }
        
        public byte[] SearchLogData(byte[] loginTicket, string logUser, string tableName, System.DateTime dateFrom, System.DateTime dateTo) {
            return base.Channel.SearchLogData(loginTicket, logUser, tableName, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<byte[]> SearchLogDataAsync(byte[] loginTicket, string logUser, string tableName, System.DateTime dateFrom, System.DateTime dateTo) {
            return base.Channel.SearchLogDataAsync(loginTicket, logUser, tableName, dateFrom, dateTo);
        }
        
        public bool SaveFieldDef(byte[] loginTicket, byte[] data) {
            return base.Channel.SaveFieldDef(loginTicket, data);
        }
        
        public System.Threading.Tasks.Task<bool> SaveFieldDefAsync(byte[] loginTicket, byte[] data) {
            return base.Channel.SaveFieldDefAsync(loginTicket, data);
        }
        
        public byte[] GetLogFieldDef(byte[] loginTicket, string tableName) {
            return base.Channel.GetLogFieldDef(loginTicket, tableName);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetLogFieldDefAsync(byte[] loginTicket, string tableName) {
            return base.Channel.GetLogFieldDefAsync(loginTicket, tableName);
        }
        
        public string[] GetTracedFields(byte[] loginTicket, string tableName) {
            return base.Channel.GetTracedFields(loginTicket, tableName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTracedFieldsAsync(byte[] loginTicket, string tableName) {
            return base.Channel.GetTracedFieldsAsync(loginTicket, tableName);
        }
        
        public string C_GetTableID(byte[] loginTicket, string sTableName, string sFieldID) {
            return base.Channel.C_GetTableID(loginTicket, sTableName, sFieldID);
        }
        
        public System.Threading.Tasks.Task<string> C_GetTableIDAsync(byte[] loginTicket, string sTableName, string sFieldID) {
            return base.Channel.C_GetTableIDAsync(loginTicket, sTableName, sFieldID);
        }
        
        public string C_GetTableFieldValue(byte[] loginTicket, string sTableName, string sField, string SCon) {
            return base.Channel.C_GetTableFieldValue(loginTicket, sTableName, sField, SCon);
        }
        
        public System.Threading.Tasks.Task<string> C_GetTableFieldValueAsync(byte[] loginTicket, string sTableName, string sField, string SCon) {
            return base.Channel.C_GetTableFieldValueAsync(loginTicket, sTableName, sField, SCon);
        }
        
        public string GetSQLServerDbListString(byte[] validationTicket, string sServerName, string sUser, string sPwd) {
            return base.Channel.GetSQLServerDbListString(validationTicket, sServerName, sUser, sPwd);
        }
        
        public System.Threading.Tasks.Task<string> GetSQLServerDbListStringAsync(byte[] validationTicket, string sServerName, string sUser, string sPwd) {
            return base.Channel.GetSQLServerDbListStringAsync(validationTicket, sServerName, sUser, sPwd);
        }
        
        public byte[] GetDBLink(byte[] loginTicket) {
            return base.Channel.GetDBLink(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDBLinkAsync(byte[] loginTicket) {
            return base.Channel.GetDBLinkAsync(loginTicket);
        }
        
        public byte[] GetDBLinkByID(byte[] loginTicket, string key) {
            return base.Channel.GetDBLinkByID(loginTicket, key);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDBLinkByIDAsync(byte[] loginTicket, string key) {
            return base.Channel.GetDBLinkByIDAsync(loginTicket, key);
        }
        
        public byte[] G_GetSystemProfile(byte[] loginTicket) {
            return base.Channel.G_GetSystemProfile(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> G_GetSystemProfileAsync(byte[] loginTicket) {
            return base.Channel.G_GetSystemProfileAsync(loginTicket);
        }
        
        public string G_GetSystemProfileVal(byte[] loginTicket, string key) {
            return base.Channel.G_GetSystemProfileVal(loginTicket, key);
        }
        
        public System.Threading.Tasks.Task<string> G_GetSystemProfileValAsync(byte[] loginTicket, string key) {
            return base.Channel.G_GetSystemProfileValAsync(loginTicket, key);
        }
        
        public byte[] GetAttachedFiles(byte[] loginTicket, string docID) {
            return base.Channel.GetAttachedFiles(loginTicket, docID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAttachedFilesAsync(byte[] loginTicket, string docID) {
            return base.Channel.GetAttachedFilesAsync(loginTicket, docID);
        }
        
        public byte[] getTable(byte[] loginTicket, string sTable) {
            return base.Channel.getTable(loginTicket, sTable);
        }
        
        public System.Threading.Tasks.Task<byte[]> getTableAsync(byte[] loginTicket, string sTable) {
            return base.Channel.getTableAsync(loginTicket, sTable);
        }
        
        public byte[] getField(byte[] loginTicket, string sTableName) {
            return base.Channel.getField(loginTicket, sTableName);
        }
        
        public System.Threading.Tasks.Task<byte[]> getFieldAsync(byte[] loginTicket, string sTableName) {
            return base.Channel.getFieldAsync(loginTicket, sTableName);
        }
        
        public byte[] getDataTableSQL(byte[] loginTicket, string sql) {
            return base.Channel.getDataTableSQL(loginTicket, sql);
        }
        
        public System.Threading.Tasks.Task<byte[]> getDataTableSQLAsync(byte[] loginTicket, string sql) {
            return base.Channel.getDataTableSQLAsync(loginTicket, sql);
        }
    }
}
