//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SG.Client.WCFHost.Set_SGSetFunSQL_H {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="SG.Server.Host.Set", ConfigurationName="Set_SGSetFunSQL_H.SGSetFunSQL_H")]
    public interface SGSetFunSQL_H {
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_DeleteFunSQL", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_DeleteFunSQLResponse")]
        bool F_DeleteFunSQL(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_DeleteFunSQL", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_DeleteFunSQLResponse")]
        System.Threading.Tasks.Task<bool> F_DeleteFunSQLAsync(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQL", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLResponse")]
        byte[] F_GetFunSQL(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQL", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLResponse")]
        System.Threading.Tasks.Task<byte[]> F_GetFunSQLAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLByID", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLByIDResponse")]
        byte[] F_GetFunSQLByID(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLByID", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLByIDResponse")]
        System.Threading.Tasks.Task<byte[]> F_GetFunSQLByIDAsync(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLByUser", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLByUserResponse")]
        byte[] F_GetFunSQLByUser(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLByUser", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLByUserResponse")]
        System.Threading.Tasks.Task<byte[]> F_GetFunSQLByUserAsync(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLData", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLDataResponse")]
        byte[] F_GetFunSQLData(byte[] loginTicket, string sCon, string sKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLData", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetFunSQLDataResponse")]
        System.Threading.Tasks.Task<byte[]> F_GetFunSQLDataAsync(byte[] loginTicket, string sCon, string sKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_CheckFunNoExists", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_CheckFunNoExistsResponse")]
        bool F_CheckFunNoExists(byte[] loginTicket, string FunNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_CheckFunNoExists", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_CheckFunNoExistsResponse")]
        System.Threading.Tasks.Task<bool> F_CheckFunNoExistsAsync(byte[] loginTicket, string FunNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetSysFun", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetSysFunResponse")]
        byte[] F_GetSysFun(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetSysFun", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetSysFunResponse")]
        System.Threading.Tasks.Task<byte[]> F_GetSysFunAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetAllFunModel", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetAllFunModelResponse")]
        byte[] F_GetAllFunModel(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/F_GetAllFunModel", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/F_GetAllFunModelResponse")]
        System.Threading.Tasks.Task<byte[]> F_GetAllFunModelAsync(byte[] loginTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_DeleteRPTColInfoScheme", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_DeleteRPTColInfoSchemeResponse")]
        bool S_DeleteRPTColInfoScheme(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_DeleteRPTColInfoScheme", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_DeleteRPTColInfoSchemeResponse")]
        System.Threading.Tasks.Task<bool> S_DeleteRPTColInfoSchemeAsync(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTScheme", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTSchemeResponse")]
        byte[] S_GetRPTScheme(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTScheme", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTSchemeResponse")]
        System.Threading.Tasks.Task<byte[]> S_GetRPTSchemeAsync(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTColInfoScheme", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTColInfoSchemeResponse")]
        byte[] S_GetRPTColInfoScheme(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTColInfoScheme", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTColInfoSchemeResponse")]
        System.Threading.Tasks.Task<byte[]> S_GetRPTColInfoSchemeAsync(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTColInfoSchemetmp", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTColInfoSchemetmpResponse")]
        byte[] S_GetRPTColInfoSchemetmp(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTColInfoSchemetmp", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_GetRPTColInfoSchemetmpResponse")]
        System.Threading.Tasks.Task<byte[]> S_GetRPTColInfoSchemetmpAsync(byte[] loginTicket, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_CheckRPTNoExists", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_CheckRPTNoExistsResponse")]
        bool S_CheckRPTNoExists(byte[] loginTicket, string FName);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.Host.Set/SGSetFunSQL_H/S_CheckRPTNoExists", ReplyAction="SG.Server.Host.Set/SGSetFunSQL_H/S_CheckRPTNoExistsResponse")]
        System.Threading.Tasks.Task<bool> S_CheckRPTNoExistsAsync(byte[] loginTicket, string FName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SGSetFunSQL_HChannel : SG.Client.WCFHost.Set_SGSetFunSQL_H.SGSetFunSQL_H, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SGSetFunSQL_HClient : System.ServiceModel.ClientBase<SG.Client.WCFHost.Set_SGSetFunSQL_H.SGSetFunSQL_H>, SG.Client.WCFHost.Set_SGSetFunSQL_H.SGSetFunSQL_H {
        
        public SGSetFunSQL_HClient() {
        }
        
        public SGSetFunSQL_HClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SGSetFunSQL_HClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SGSetFunSQL_HClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SGSetFunSQL_HClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool F_DeleteFunSQL(byte[] loginTicket, string key) {
            return base.Channel.F_DeleteFunSQL(loginTicket, key);
        }
        
        public System.Threading.Tasks.Task<bool> F_DeleteFunSQLAsync(byte[] loginTicket, string key) {
            return base.Channel.F_DeleteFunSQLAsync(loginTicket, key);
        }
        
        public byte[] F_GetFunSQL(byte[] loginTicket) {
            return base.Channel.F_GetFunSQL(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> F_GetFunSQLAsync(byte[] loginTicket) {
            return base.Channel.F_GetFunSQLAsync(loginTicket);
        }
        
        public byte[] F_GetFunSQLByID(byte[] loginTicket, string key) {
            return base.Channel.F_GetFunSQLByID(loginTicket, key);
        }
        
        public System.Threading.Tasks.Task<byte[]> F_GetFunSQLByIDAsync(byte[] loginTicket, string key) {
            return base.Channel.F_GetFunSQLByIDAsync(loginTicket, key);
        }
        
        public byte[] F_GetFunSQLByUser(byte[] loginTicket, string key) {
            return base.Channel.F_GetFunSQLByUser(loginTicket, key);
        }
        
        public System.Threading.Tasks.Task<byte[]> F_GetFunSQLByUserAsync(byte[] loginTicket, string key) {
            return base.Channel.F_GetFunSQLByUserAsync(loginTicket, key);
        }
        
        public byte[] F_GetFunSQLData(byte[] loginTicket, string sCon, string sKey) {
            return base.Channel.F_GetFunSQLData(loginTicket, sCon, sKey);
        }
        
        public System.Threading.Tasks.Task<byte[]> F_GetFunSQLDataAsync(byte[] loginTicket, string sCon, string sKey) {
            return base.Channel.F_GetFunSQLDataAsync(loginTicket, sCon, sKey);
        }
        
        public bool F_CheckFunNoExists(byte[] loginTicket, string FunNum) {
            return base.Channel.F_CheckFunNoExists(loginTicket, FunNum);
        }
        
        public System.Threading.Tasks.Task<bool> F_CheckFunNoExistsAsync(byte[] loginTicket, string FunNum) {
            return base.Channel.F_CheckFunNoExistsAsync(loginTicket, FunNum);
        }
        
        public byte[] F_GetSysFun(byte[] loginTicket) {
            return base.Channel.F_GetSysFun(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> F_GetSysFunAsync(byte[] loginTicket) {
            return base.Channel.F_GetSysFunAsync(loginTicket);
        }
        
        public byte[] F_GetAllFunModel(byte[] loginTicket) {
            return base.Channel.F_GetAllFunModel(loginTicket);
        }
        
        public System.Threading.Tasks.Task<byte[]> F_GetAllFunModelAsync(byte[] loginTicket) {
            return base.Channel.F_GetAllFunModelAsync(loginTicket);
        }
        
        public bool S_DeleteRPTColInfoScheme(byte[] loginTicket, string key) {
            return base.Channel.S_DeleteRPTColInfoScheme(loginTicket, key);
        }
        
        public System.Threading.Tasks.Task<bool> S_DeleteRPTColInfoSchemeAsync(byte[] loginTicket, string key) {
            return base.Channel.S_DeleteRPTColInfoSchemeAsync(loginTicket, key);
        }
        
        public byte[] S_GetRPTScheme(byte[] loginTicket, string key) {
            return base.Channel.S_GetRPTScheme(loginTicket, key);
        }
        
        public System.Threading.Tasks.Task<byte[]> S_GetRPTSchemeAsync(byte[] loginTicket, string key) {
            return base.Channel.S_GetRPTSchemeAsync(loginTicket, key);
        }
        
        public byte[] S_GetRPTColInfoScheme(byte[] loginTicket, string key) {
            return base.Channel.S_GetRPTColInfoScheme(loginTicket, key);
        }
        
        public System.Threading.Tasks.Task<byte[]> S_GetRPTColInfoSchemeAsync(byte[] loginTicket, string key) {
            return base.Channel.S_GetRPTColInfoSchemeAsync(loginTicket, key);
        }
        
        public byte[] S_GetRPTColInfoSchemetmp(byte[] loginTicket, string key) {
            return base.Channel.S_GetRPTColInfoSchemetmp(loginTicket, key);
        }
        
        public System.Threading.Tasks.Task<byte[]> S_GetRPTColInfoSchemetmpAsync(byte[] loginTicket, string key) {
            return base.Channel.S_GetRPTColInfoSchemetmpAsync(loginTicket, key);
        }
        
        public bool S_CheckRPTNoExists(byte[] loginTicket, string FName) {
            return base.Channel.S_CheckRPTNoExists(loginTicket, FName);
        }
        
        public System.Threading.Tasks.Task<bool> S_CheckRPTNoExistsAsync(byte[] loginTicket, string FName) {
            return base.Channel.S_CheckRPTNoExistsAsync(loginTicket, FName);
        }
    }
}
