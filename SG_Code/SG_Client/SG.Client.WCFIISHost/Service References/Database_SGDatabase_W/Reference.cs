//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SG.Client.WCFIISHost.Database_SGDatabase_W {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="SG.Server.IISHost.Base", ConfigurationName="Database_SGDatabase_W.SGDatabase_W")]
    public interface SGDatabase_W {
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/AddCommonType", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/AddCommonTypeResponse")]
        bool AddCommonType(byte[] loginTicket, string sfid, string code, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/AddCommonType", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/AddCommonTypeResponse")]
        System.Threading.Tasks.Task<bool> AddCommonTypeAsync(byte[] loginTicket, string sfid, string code, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/SearchCommonType", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/SearchCommonTypeResponse")]
        byte[] SearchCommonType(byte[] loginTicket, string dataType);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/SearchCommonType", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/SearchCommonTypeResponse")]
        System.Threading.Tasks.Task<byte[]> SearchCommonTypeAsync(byte[] loginTicket, string dataType);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/DeleteCommonType", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/DeleteCommonTypeResponse")]
        bool DeleteCommonType(byte[] loginTicket, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/DeleteCommonType", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/DeleteCommonTypeResponse")]
        System.Threading.Tasks.Task<bool> DeleteCommonTypeAsync(byte[] loginTicket, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/IsExistsCommonType", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/IsExistsCommonTypeResponse")]
        bool IsExistsCommonType(byte[] loginTicket, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/IsExistsCommonType", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/IsExistsCommonTypeResponse")]
        System.Threading.Tasks.Task<bool> IsExistsCommonTypeAsync(byte[] loginTicket, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/GetItemClass", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/GetItemClassResponse")]
        byte[] GetItemClass(byte[] loginTicket, string FNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/GetItemClass", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/GetItemClassResponse")]
        System.Threading.Tasks.Task<byte[]> GetItemClassAsync(byte[] loginTicket, string FNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/DeleteItemClass", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/DeleteItemClassResponse")]
        bool DeleteItemClass(byte[] loginTicket, string FNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/DeleteItemClass", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/DeleteItemClassResponse")]
        System.Threading.Tasks.Task<bool> DeleteItemClassAsync(byte[] loginTicket, string FNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/IsExistsItemClass", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/IsExistsItemClassResponse")]
        bool IsExistsItemClass(byte[] loginTicket, string FNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/IsExistsItemClass", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/IsExistsItemClassResponse")]
        System.Threading.Tasks.Task<bool> IsExistsItemClassAsync(byte[] loginTicket, string FNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/GetItemDesc", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/GetItemDescResponse")]
        byte[] GetItemDesc(byte[] loginTicket, string FNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/GetItemDesc", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/GetItemDescResponse")]
        System.Threading.Tasks.Task<byte[]> GetItemDescAsync(byte[] loginTicket, string FNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/DeleteItemDesc", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/DeleteItemDescResponse")]
        bool DeleteItemDesc(byte[] loginTicket, string fid);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/DeleteItemDesc", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/DeleteItemDescResponse")]
        System.Threading.Tasks.Task<bool> DeleteItemDescAsync(byte[] loginTicket, string fid);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/SetOrder", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/SetOrderResponse")]
        bool SetOrder(byte[] loginTicket, string Upfid, string Downfid);
        
        [System.ServiceModel.OperationContractAttribute(Action="SG.Server.IISHost.Base/SGDatabase_W/SetOrder", ReplyAction="SG.Server.IISHost.Base/SGDatabase_W/SetOrderResponse")]
        System.Threading.Tasks.Task<bool> SetOrderAsync(byte[] loginTicket, string Upfid, string Downfid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SGDatabase_WChannel : SG.Client.WCFIISHost.Database_SGDatabase_W.SGDatabase_W, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SGDatabase_WClient : System.ServiceModel.ClientBase<SG.Client.WCFIISHost.Database_SGDatabase_W.SGDatabase_W>, SG.Client.WCFIISHost.Database_SGDatabase_W.SGDatabase_W {
        
        public SGDatabase_WClient() {
        }
        
        public SGDatabase_WClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SGDatabase_WClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SGDatabase_WClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SGDatabase_WClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddCommonType(byte[] loginTicket, string sfid, string code, string name) {
            return base.Channel.AddCommonType(loginTicket, sfid, code, name);
        }
        
        public System.Threading.Tasks.Task<bool> AddCommonTypeAsync(byte[] loginTicket, string sfid, string code, string name) {
            return base.Channel.AddCommonTypeAsync(loginTicket, sfid, code, name);
        }
        
        public byte[] SearchCommonType(byte[] loginTicket, string dataType) {
            return base.Channel.SearchCommonType(loginTicket, dataType);
        }
        
        public System.Threading.Tasks.Task<byte[]> SearchCommonTypeAsync(byte[] loginTicket, string dataType) {
            return base.Channel.SearchCommonTypeAsync(loginTicket, dataType);
        }
        
        public bool DeleteCommonType(byte[] loginTicket, string code) {
            return base.Channel.DeleteCommonType(loginTicket, code);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCommonTypeAsync(byte[] loginTicket, string code) {
            return base.Channel.DeleteCommonTypeAsync(loginTicket, code);
        }
        
        public bool IsExistsCommonType(byte[] loginTicket, string code) {
            return base.Channel.IsExistsCommonType(loginTicket, code);
        }
        
        public System.Threading.Tasks.Task<bool> IsExistsCommonTypeAsync(byte[] loginTicket, string code) {
            return base.Channel.IsExistsCommonTypeAsync(loginTicket, code);
        }
        
        public byte[] GetItemClass(byte[] loginTicket, string FNumber) {
            return base.Channel.GetItemClass(loginTicket, FNumber);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetItemClassAsync(byte[] loginTicket, string FNumber) {
            return base.Channel.GetItemClassAsync(loginTicket, FNumber);
        }
        
        public bool DeleteItemClass(byte[] loginTicket, string FNumber) {
            return base.Channel.DeleteItemClass(loginTicket, FNumber);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteItemClassAsync(byte[] loginTicket, string FNumber) {
            return base.Channel.DeleteItemClassAsync(loginTicket, FNumber);
        }
        
        public bool IsExistsItemClass(byte[] loginTicket, string FNumber) {
            return base.Channel.IsExistsItemClass(loginTicket, FNumber);
        }
        
        public System.Threading.Tasks.Task<bool> IsExistsItemClassAsync(byte[] loginTicket, string FNumber) {
            return base.Channel.IsExistsItemClassAsync(loginTicket, FNumber);
        }
        
        public byte[] GetItemDesc(byte[] loginTicket, string FNumber) {
            return base.Channel.GetItemDesc(loginTicket, FNumber);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetItemDescAsync(byte[] loginTicket, string FNumber) {
            return base.Channel.GetItemDescAsync(loginTicket, FNumber);
        }
        
        public bool DeleteItemDesc(byte[] loginTicket, string fid) {
            return base.Channel.DeleteItemDesc(loginTicket, fid);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteItemDescAsync(byte[] loginTicket, string fid) {
            return base.Channel.DeleteItemDescAsync(loginTicket, fid);
        }
        
        public bool SetOrder(byte[] loginTicket, string Upfid, string Downfid) {
            return base.Channel.SetOrder(loginTicket, Upfid, Downfid);
        }
        
        public System.Threading.Tasks.Task<bool> SetOrderAsync(byte[] loginTicket, string Upfid, string Downfid) {
            return base.Channel.SetOrderAsync(loginTicket, Upfid, Downfid);
        }
    }
}
